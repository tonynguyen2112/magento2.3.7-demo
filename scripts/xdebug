#!/usr/bin/env bash
#
# Script to create virtual host for Nginx server
#

# UnComment it if bash is lower than 4.x version
shopt -s extglob

################################################################################
# CORE FUNCTIONS - Do not edit
################################################################################

## Uncomment it for debugging purpose
###set -o errexit
#set -o pipefail
#set -o nounset
#set -o xtrace

#
# VARIABLES
#
_bold=$(tput bold)
_underline=$(tput sgr 0 1)
_reset=$(tput sgr0)

_purple=$(tput setaf 171)
_red=$(tput setaf 1)
_green=$(tput setaf 76)
_tan=$(tput setaf 3)
_blue=$(tput setaf 38)

#
# HEADERS & LOGGING
#
function _debug()
{
    if [[ "$DEBUG" = 1 ]]; then
        "$@"
    fi
}

function _header()
{
    printf '\n%s%s==========  %s  ==========%s\n' "$_bold" "$_purple" "$@" "$_reset"
}

function _arrow()
{
    printf '➜ %s\n' "$@"
}

function _success()
{
    printf '%s✔ %s%s\n' "$_green" "$@" "$_reset"
}

function _error() {
    printf '%s✖ %s%s\n' "$_red" "$@" "$_reset"
}

function _warning()
{
    printf '%s➜ %s%s\n' "$_tan" "$@" "$_reset"
}

function _underline()
{
    printf '%s%s%s%s\n' "$_underline" "$_bold" "$@" "$_reset"
}

function _bold()
{
    printf '%s%s%s\n' "$_bold" "$@" "$_reset"
}

function _note()
{
    printf '%s%s%sNote:%s %s%s%s\n' "$_underline" "$_bold" "$_blue" "$_reset" "$_blue" "$@" "$_reset"
}

function _die()
{
    _error "$@"
    exit 1
}

function _safeExit()
{
    exit 0
}

#
# UTILITY HELPER
#
function _seekConfirmation()
{
  printf '\n%s%s%s' "$_bold" "$@" "$_reset"
  read -p " (y/n) " -n 1
  printf '\n'
}

# Test whether the result of an 'ask' is a confirmation
function _isConfirmed()
{
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
        return 0
    fi
    return 1
}


function _typeExists()
{
    if type "$1" >/dev/null; then
        return 0
    fi
    return 1
}

function _isOs()
{
    if [[ "${OSTYPE}" == $1* ]]; then
      return 0
    fi
    return 1
}

function _isOsDebian()
{
    if [[ -f /etc/debian_version ]]; then
        return 0
    else
        return 1
    fi
}

function _isOsRedHat()
{
    if [[ -f /etc/redhat-release ]]; then
        return 0
    else
        return 1
    fi
}

function _isOsMac()
{
    if [[ "$(uname -s)" = "Darwin" ]]; then
        return 0
    else
        return 1
    fi
}

function _checkRootUser()
{
    #if [ "$(id -u)" != "0" ]; then
    if [ "$(whoami)" != 'root' ]; then
        _die "You cannot run $0 as non-root user. Please use sudo $0"
    fi
}


function askYesOrNo {
    REPLY=""
    while [ -z "$REPLY" ] ; do
        read -ep "$1 $YES_NO_PROMPT" -n1 REPLY
        REPLY=$(echo ${REPLY}|tr [:lower:] [:upper:])
        case $REPLY in
            $YES_CAPS ) return 0 ;;
            $NO_CAPS ) return 1 ;;
            * ) REPLY=""
        esac
    done
}


function _printPoweredBy()
{
    local mp_ascii
    mp_ascii='
                ____  __  __    _    ____ _____ ___  ____   ____
               / ___||  \/  |  / \  |  _ \_   _/ _ \/ ___| / ___|
               \___ \| |\/| | / _ \ | |_) || || | | \___ \| |
                ___) | |  | |/ ___ \|  _ < | || |_| |___) | |___
               |____/|_|  |_/_/   \_\_| \_\|_| \___/|____/ \____|

'
    cat <<EOF
${_green}
$mp_ascii

################################################################################
${_reset}
EOF
}

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _printUsage()
{
    echo -n "Docker Xdebug tools
Version $VERSION

./scripts/$(basename "$0") [OPT] [ARG]...

    Options:
        enable                    Enable Xdebug.
        disable                   Disable Xdebug.
        status                    List all Xdebug status.
    Args:
        --php-version             PHP version used for Xdebug (php70|php71|php72|php73|php74|php74-c2).
        -h, --help                Display this help and exit.

    Examples:
      Disable Xdebug for PHP 7.2
        ./scripts/$(basename "$0") disable --php-version=php72
      Enable Xdebug for PHP 7.3
        ./scripts/$(basename "$0") enable --php-version=php73
"
    _printPoweredBy
    exit 1
}

function checkCmdDependencies()
{
    local _dependencies=(
      wget
      cat
      basename
      mkdir
      cp
      mv
      rm
      chown
      chmod
      date
      find
      awk
      docker-compose
      docker
    )

    for cmd in "${_dependencies[@]}"
    do
        hash "${cmd}" &>/dev/null || _die "'${cmd}' command not found."
    done;
}

function processArgs()
{
    # Parse Arguments

    case $1 in      
        enable)
            COMMAND="$1"
            for arg in "${@:2}"
            do
                case $arg in
                    --php-version=*)
                        APP_PHP="${arg#*=}"
                    ;;  
                    -h|--help)
                        _printUsage
                    ;;
                    *)
                        _printUsage
                    ;;
                esac
            done
        ;;      
        disable)
            COMMAND="$1"
            for arg in "${@:2}"
            do
                case $arg in
                    --php-version=*)
                        APP_PHP="${arg#*=}"
                    ;;  
                    -h|--help)
                        _printUsage
                    ;;
                    *)
                        _printUsage
                    ;;
                esac
            done
        ;; 
        status)
            COMMAND="$1"
            for arg in "${@:2}"
            do
                case $arg in
                    --php-version=*)
                        APP_PHP="${arg#*=}"
                    ;;  
                    -h|--help)
                        _printUsage
                    ;;
                    *)
                        _printUsage
                    ;;
                esac
            done
        ;; 
        -h|--help)
            _printUsage
        ;;
        *)
            _printUsage
        ;;
    esac
        
    validateArgs
}

function initDefaultArgs()
{
    YES_STRING=$"y"
    NO_STRING=$"n"
    YES_NO_PROMPT=$"[y/n]: "
    YES_CAPS=$(echo ${YES_STRING}|tr [:lower:] [:upper:])
    NO_CAPS=$(echo ${NO_STRING}|tr [:lower:] [:upper:])

    PHP_INI_LOCATION="$(pwd)/conf/php/${APP_PHP}/php.ini"

    XDEBUG_STATUS=
}

function validateArgs()
{
    ERROR_COUNT=0
    if [[ -z "$APP_PHP" ]]; then
        _error "--php-version=... parameter is missing."
        ERROR_COUNT=$((ERROR_COUNT + 1))
    fi
    if [[ ! -z "$APP_PHP" && "$APP_PHP" != @(php70|php71|php72|php73|php74|php74-c2) ]]; then
        _error "Please enter valid application php --php-version=... parameter(php70|php71|php72|php73|php74|php74-c2)."
        ERROR_COUNT=$((ERROR_COUNT + 1))
    fi
    
    [[ "$ERROR_COUNT" -gt 0 ]] && exit 1
}

function restartPhpContainer()
{
    _arrow "Reload container ${APP_PHP}"
    docker-compose restart ${APP_PHP} || _die "${APP_PHP} cannot reload."
    _success "Container ${APP_PHP} reloaded."
}

function enableXdebug()
{
    statusXdebug
    if [[ $XDEBUG_STATUS == 1 ]]; then
        _warning "Xdebug enabled, no need to do anything" && exit 1
    fi
    _arrow "Enable Xdebug for ${APP_PHP}"

    sed -i 's/;zend_extension=xdebug/zend_extension=xdebug/g' $PHP_INI_LOCATION || _die "Cannot change Xdebug setting"

    _success "Xdebug enabled"
    restartPhpContainer
}

function disableXdebug()
{
    statusXdebug
    if [[ $XDEBUG_STATUS == 0 ]]; then
        _warning "Xdebug disabled, no need to do anything" && exit 1
    fi
    _arrow "Disable Xdebug for ${APP_PHP}"

    sed -i 's/zend_extension=xdebug/;zend_extension=xdebug/g' $PHP_INI_LOCATION || _die "Cannot change Xdebug setting"

    _success "Xdebug disabled"
    restartPhpContainer
}

function checkPhpContainerRunning()
{
    _arrow "Check ${APP_PHP} is running?"
    if [[ $($(pwd)/scripts/list-services | grep ${APP_PHP}) ]]; then
        _success "${APP_PHP} is running"
    else
        _error "${APP_PHP} is not running" && exit 1
    fi
}

function statusXdebug()
{
    _arrow "Check Xdebug status for ${APP_PHP}"
    if [[ $(docker-compose exec ${APP_PHP} php -i | grep xdebug) ]]; then 
        _success "${APP_PHP}: Xdebug enabled"
    XDEBUG_STATUS=1
    else 
       _warning "${APP_PHP}: Xdebug disabled"
    XDEBUG_STATUS=0
    fi
}

function doAction()
{
    case $COMMAND in      
        enable)
            enableXdebug
        ;;      
        disable)
            disableXdebug
        ;;
        status)
            statusXdebug
        ;;
    esac
}

function printSuccessMessage()
{
    _success "Your Action has done!"
}

################################################################################
# Main
################################################################################
export LC_CTYPE=C
export LANG=C

DEBUG=0
_debug set -x
VERSION="1"

function main()
{
    # _checkRootUser
    checkCmdDependencies
    

    [[ $# -lt 1 ]] && _printUsage

    processArgs "$@"

    initDefaultArgs
    checkPhpContainerRunning

    doAction
    printSuccessMessage
    exit 0
}

main "$@"

_debug set +x